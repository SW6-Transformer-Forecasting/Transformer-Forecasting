@using Transformer_Forecasting_Web.Data
@using Transformer_Forecasting_Web.SQL
@inject IDataAccess _data
@inject IConfiguration _config
@using ChartJs.Blazor.LineChart


<MudDialog>
    <DialogContent>
        
        <!--To be changed when graph is put in-->
        
        <MudPaper Style="@($"background:{Theme.Palette.BackgroundGrey};")">
            <MudStack Row="true">
                <MudStack>
                    <MudContainer>
                        <MudPaper Class="pa-2 ma-2" Style="@($"background:{Theme.Palette.BackgroundGrey};")"  Elevation="0" MinWidth="100px" MaxWidth="200px">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudPaper Class="pa-1 px-2">
                                        <MudText Typo="Typo.h6">Description</MudText>
                                            <MudText>@description.description</MudText>
                                    </MudPaper>
                                </MudItem>                       
                            </MudGrid>
                        </MudPaper>
                    </MudContainer>
                </MudStack>
                <MudContainer MaxWidth="MaxWidth.Large">
                    <Chart Config="predictionLineConfig"></Chart>
                </MudContainer>
                @*<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>*@
            </MudStack>
        </MudPaper>        
    
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Description description { get; set; }

    private MudTheme Theme = new MudTheme();

    public List<ChartSeries> Series = new List<ChartSeries>() { };
    private List<Prediction> predictionList = new List<Prediction>();
    private ChartOptions options = new ChartOptions();
    private List<Prediction> predictions = new List<Prediction>();


    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private LineConfig predictionLineConfig;

    protected override void OnInitialized()
    {
        ReadSQL();
        setPredictionLineConfig();

        List<float> OT_predictions = new List<float>();
        foreach(var individualPrediction in predictions)
        {
            predictionLineConfig.Data.Labels.Add(individualPrediction.dateValue.ToString());
            OT_predictions.Add(individualPrediction.OT_prediction);
        }

        IDataset<float> OT_data = new LineDataset<float>(OT_predictions)
        {
            Label = "Oil Temperature",
            BackgroundColor = ColorUtil.FromDrawingColor(ChartProperties.ColorPalette.Blue),
            BorderColor = ColorUtil.FromDrawingColor(ChartProperties.ColorPalette.Blue),
            Fill = FillingMode.Disabled
        };

        predictionLineConfig.Data.Datasets.Add(OT_data);
    }

    void setPredictionLineConfig()
    {
        predictionLineConfig = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Oil Temperature"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date stamp of prediction"
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "°C"
                            }
                        }
                    }
                    }
                }
            };
    }

    public async void ReadSQL()
    {
        string query;

        query = "SELECT group_id, row_id, OT_prediction, dateValue FROM predictions WHERE group_id = " + description.group_id.ToString();
        predictions = await _data.LoadData<Prediction, dynamic>(query, new { }, _config.GetConnectionString("default"));

        Console.WriteLine();
    }
}
