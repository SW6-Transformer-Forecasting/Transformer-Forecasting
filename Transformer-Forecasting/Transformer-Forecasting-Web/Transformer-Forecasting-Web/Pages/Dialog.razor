@using Transformer_Forecasting_Web.Data
@using Transformer_Forecasting_Web.SQL
@inject IDataAccess _data
@inject IConfiguration _config
@using ChartJs.Blazor.LineChart


<MudDialog>
    <DialogContent>
        
        <!--To be changed when graph is put in-->
        
        <MudPaper Style="@($"background:{Theme.Palette.BackgroundGrey};")">
            <MudStack Row="true">
                <MudStack>
                    <MudContainer>
                        <MudPaper Class="pa-2 ma-2" Style="@($"background:{Theme.Palette.BackgroundGrey};")"  Elevation="0" MinWidth="100px" MaxWidth="200px">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudPaper Class="pa-1 mt-2 px-2">
                                        <MudText Typo="Typo.h6" >Model</MudText>
                                            <MudText>@prediction.dateValue</MudText>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudPaper Class="pa-1 px-2">
                                        <MudText Typo="Typo.h6">Description</MudText>
                                            <MudText>@prediction.OT_prediction</MudText>
                                    </MudPaper>
                                </MudItem>                       
                            </MudGrid>
                        </MudPaper>
                    </MudContainer>
                </MudStack>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
            </MudStack>
        </MudPaper>        
    
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Prediction prediction { get; set; }
    [Parameter] public Description description { get; set; }

    private MudTheme Theme = new MudTheme();

    public List<ChartSeries> Series = new List<ChartSeries>() { };
    private ChartOptions options = new ChartOptions();
    private List<Prediction> predictionList = new List<Prediction>();


    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    Justify _justify = Justify.SpaceEvenly;


    //change labels to fit to the time period from the database
    private string[] XAxisLabels;
    public string[] Months = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    List<double> graphValues = new List<double>();


    protected override void OnInitialized()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        //options.YAxisFormat = "c2";

        ReadSQL();
        if (predictionList.Count != 0)
        {
            List<string> xLabels = new List<string>();
            int labelCount;
            foreach (var item in predictionList)
            {
                string[] dateTime = item.dateValue.Split(' ');
                string[] dateString = dateTime[0].Split('-');
                if (!xLabels.Contains(Months[Convert.ToInt32(dateString[1]) - 1])) //something here if x axis labels on graph is weird when switching months
                {
                    xLabels.Add(Months[Convert.ToInt32(dateString[1]) - 1]);
                }
                else
                {
                    //xLabels.Add(" ");
                }
                //xLabels.Add(dateTime[1] + "<br />" + dateString[0] + "<br />" + Months[Convert.ToInt32(dateString[1]) - 1]);
                graphValues.Add(item.OT_prediction);
            }
            XAxisLabels = xLabels.ToArray();
            AddToGraph();
        }
    }

    public async void ReadSQL()
    {
        string query;

        query = "SELECT group_id, row_id, OT_prediction, dateValue FROM predictions Where group_id = " + prediction.group_id.ToString();
        predictionList = await _data.LoadData<Prediction, dynamic>(query, new { }, _config.GetConnectionString("default"));


        Console.WriteLine();
    }

    //add to current graph
    public void AddToGraph()
    {
        Series.Add(new ChartSeries() { Name = "Model 1", Data = graphValues.ToArray() });
    }

    //creation of new graph
    public void ChangeGraph()
    {
        /*var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "test 1", Data = DTP_Value.ToArray() },
            new ChartSeries() { Name = "test 2", Data = LFP_Value.ToArray() },
        };
        Series = new_series;*/
    }


}
