@page "/"
@using Transformer_Forecasting_Web.Data
@inject WeatherForecastService ForecastService
@inject IDialogService DialogService



<PageTitle>Index</PageTitle>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudPaper Class="pa-4 mx-lg-auto " Style="@($"background:{Theme.Palette.BackgroundGrey};")">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" >
            <MudTable  Items="forecasts" Hover=true Bordered=true Striped=true MultiSelection="false" @bind-SelectedItem="selectedItem" T="Prediction" OnRowClick="@OpenDialog">
                <ToolBarContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => CreatePredictionDialog())">New Prediction</MudButton>
                        <MudSpacer></MudSpacer>
                        <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </MudContainer>
                </ToolBarContent>
                <HeaderContent>
                    <MudTd>Model</MudTd>
                    <MudTh>Periode Description</MudTh>
                    <MudTh>Start date</MudTh>
                    <MudTh>End date</MudTh>
                </HeaderContent>
                <RowTemplate> 
                    <MudTd>@context.Model</MudTd>
                    <MudTd>@context.PeriodDescription</MudTd>
                    <MudTd>@context.StartDate</MudTd>
                    <MudTd>@context.EndDate</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager></MudTablePager>
                </PagerContent>
            </MudTable>
        </MudContainer>
    </MudPaper>
}

@code{
    private IEnumerable<Prediction> forecasts = new List<Prediction>();
    private string searchString1 = "";
    private Prediction selectedItem = new Prediction();
    private Prediction foo0 = new Prediction(1, "linear", "string", DateTime.Now, DateTime.Now.AddHours(1));
    private Prediction foo1 = new Prediction(2, "Nlinear", "string", DateTime.Now.AddDays(1), DateTime.Now.AddDays(1).AddHours(1));
    private Prediction foo2 = new Prediction(3, "linear", "string", DateTime.Now.AddDays(2), DateTime.Now.AddDays(2).AddHours(2));
    private List<Prediction> lol = new List<Prediction>();
    private MudTheme Theme = new MudTheme();



    protected override async Task OnInitializedAsync()
    {

        lol.Add(foo0);
        lol.Add(foo1);
        lol.Add(foo2);
        forecasts = lol;
    }

    public void OpenDialog(TableRowClickEventArgs<Prediction> p)
    {
        var parameters = new DialogParameters{["prediction"]=selectedItem};
        //var options = new DialogOptions { CloseOnEscapeKey = true };

        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
            CloseButton = true,
            DisableBackdropClick = false,
            NoHeader = false,
            Position = DialogPosition.Center,
            CloseOnEscapeKey = true
        };

        DialogService.Show<Dialog>("Dialog Content", parameters, options);

    }
    void CreatePredictionDialog()
    {
          var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Small,
            CloseButton = true,
            DisableBackdropClick = false,
            NoHeader = false,
            Position = DialogPosition.Center,
            CloseOnEscapeKey = true
        };
        DialogService.Show<CreatePredictionDialog>("Create Prediction", options);
    }

    //private bool FilterFunc1(WeatherForecast forecasts) => FilterFunc(forecasts, searchString1);

    //private bool FilterFunc(WeatherForecast forecasts, string searchString)
    //{
    //    if (string.IsNullOrWhiteSpace(searchString))
    //        return true;
    //    if (forecasts.Summary.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;
    //    if (forecasts.TemperatureC.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;
    //    if (forecasts.TemperatureF.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //    return false;
    //}
}