@page "/"
@using Transformer_Forecasting_Web.Data
@inject WeatherForecastService ForecastService
@inject IDialogService DialogService
@using Transformer_Forecasting_Web.SQL
@inject IDataAccess _data
@inject IConfiguration _config

<PageTitle>Index</PageTitle>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudPaper Class="pa-4 mx-lg-auto " Style="@($"background:{Theme.Palette.BackgroundGrey};")">
            <MudGrid>
                <MudItem Class="d-flex ml-6 my-2 gap-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => CreatePredictionDialog())">New Prediction</MudButton>
                </MudItem>
            </MudGrid>
        
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" >
                <MudTable Items="forecasts" Hover=true Bordered=true Striped=true MultiSelection="false" @bind-SelectedItem="selectedItem" T="Prediction" OnRowClick="@OpenDialog">
                    <ToolBarContent>
                         <MudText Typo="Typo.h6">Predictions</MudText>
                         <MudSpacer />
                         <MudTextField Class="d-flex flex-row-reverse mt-0 pr-3" Style="width: 400px;" @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTd>Date</MudTd>
                        <MudTh>Oil Temperature</MudTh>
                    </HeaderContent>
                    <RowTemplate> 
                        <MudTd>@context.dateValue</MudTd>
                        <MudTd>@context.OT_prediction</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager></MudTablePager>
                    </PagerContent>
                </MudTable>
            </MudContainer>
    </MudPaper>
}

@code{
    private IEnumerable<Prediction> forecasts = new List<Prediction>();
    private string searchString1 = "";
    private Prediction selectedItem = new Prediction();
    private MudTheme Theme = new MudTheme();

    List<Description> descriptions = new List<Description>();
    List<Prediction> predictions = new List<Prediction>();


    protected override async Task OnInitializedAsync()
    {
        ReadSQL();
        forecasts = predictions;
    }

    public async void ReadSQL()
    {
        string query;

        query = "SELECT group_id, description FROM descriptions";
        descriptions = await _data.LoadData<Description, dynamic>(query, new { }, _config.GetConnectionString("default"));

        query = "SELECT group_id, row_id, OT_prediction, dateValue FROM predictions";
        predictions = await _data.LoadData<Prediction, dynamic>(query, new { }, _config.GetConnectionString("default"));

        Console.WriteLine();
    }

    public void OpenDialog(TableRowClickEventArgs<Prediction> p)
    {
        var parameters = new DialogParameters{["prediction"]=selectedItem};
        //var options = new DialogOptions { CloseOnEscapeKey = true };

        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
            CloseButton = true,
            DisableBackdropClick = false,
            NoHeader = false,
            Position = DialogPosition.Center,
            CloseOnEscapeKey = true
        };

        DialogService.Show<Dialog>("Dialog Content", parameters, options);

    }
    void CreatePredictionDialog()
    {
        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Small,
            CloseButton = true,
            DisableBackdropClick = false,
            NoHeader = false,
            Position = DialogPosition.Center,
            CloseOnEscapeKey = true
        };
        DialogService.Show<CreatePredictionDialog>("Create Prediction", options);
    }

    //private bool FilterFunc1(WeatherForecast forecasts) => FilterFunc(forecasts, searchString1);

    //private bool FilterFunc(WeatherForecast forecasts, string searchString)
    //{
    //    if (string.IsNullOrWhiteSpace(searchString))
    //        return true;
    //    if (forecasts.Summary.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;
    //    if (forecasts.TemperatureC.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;
    //    if (forecasts.TemperatureF.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //    return false;
    //}
}