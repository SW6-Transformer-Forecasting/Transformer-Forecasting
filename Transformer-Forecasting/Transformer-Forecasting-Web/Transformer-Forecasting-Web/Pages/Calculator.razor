@page "/loadcalculator"
@using Transformer_Forecasting_Web.Data;
@using Transformer_Forecasting_Web.ModelExecution
@inject ModelExecutor modelExecution
@using Transformer_Forecasting_Web.SQL
@inject IDataAccess _data
@inject IConfiguration _config

<MudPaper Class="pa-4 mx-lg-auto" Elevation="3" Style="@($"background:{Theme.Palette.BackgroundGrey};")">
    <MudText Class="p-3" Typo="Typo.h6">Load Calculator</MudText>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper  Class="p-1">
                <MudGrid Class="pa-8" Justify="Justify.FlexStart">
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="HUFL" Label="HUFL" Variant="Variant.Outlined"></MudTextField>
                            <MudTextField @bind-Value="MUFL" Label="MUFL" Variant="Variant.Outlined"></MudTextField>
                            <MudTextField @bind-Value="LUFL" Label="LUFL" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="HULL" Label="HULL" Variant="Variant.Outlined"></MudTextField>
                            <MudTextField @bind-Value="MULL" Label="MULL" Variant="Variant.Outlined"></MudTextField>
                            <MudTextField @bind-Value="LULL" Label="LULL" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                    </MudGrid>
                        <MudGrid>
                            <MudItem xs="12" sm="12" md="12">
                                <MudContainer Class="text-center pl-2 pt-2">
                                <MudButton Disabled="@_loading" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="@(() => Loading())">
                                        @if (_loading)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Loading</MudText>
                                        }
                                        else
                                        {
                                            if (!BoxesFull())
                                            {
                                                <MudText>Fill Boxes</MudText>
                                            }
                                            else
                                            {
                                                <MudText>Calculate</MudText>
                                            }
                                        }
                                </MudButton>
                                </MudContainer>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12" sm="12" md="12">
                                <MudField Label="Oil Temperature" Variant="Variant.Outlined" Adornment="Adornment.End">@loadPrediction</MudField>
                            </MudItem>
                        </MudGrid>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>


@code {
    public static double loadPrediction;

    string loadPredString = loadPrediction.ToString("#0.0");

    private bool _loading = false;

    async Task Loading()
    {
        if (BoxesFull())
        {
            _loading = true;
            await Task.Delay(3000);
            RunCalculation();
            UpdatePrediction();
        }
        _loading = false;

    }


    public double? HUFL = null;
    public double? HULL = null;
    public double? MUFL = null;
    public double? MULL = null;
    public double? LUFL = null;
    public double? LULL = null;


    private void RunCalculation()
    {
        string arguments = string.Format("{0} \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", @"./ModelExecution/TFmain/loadcalculatorproduction.py", HUFL, HULL, MUFL, MULL, LUFL, LULL);
        modelExecution.RunPythonScript(arguments);
    }

    private bool BoxesFull()
    {
        bool boxesFull = true;

        if (this.HUFL == null || this.HULL == null || this.MUFL == null || this.MULL == null || this.LUFL == null || this.LULL == null)
            boxesFull = false;

        return boxesFull;
    }

    List<Calculation> calculation = new List<Calculation>();

    private async void UpdatePrediction()
    {
        calculation = await _data.LoadData<Calculation, dynamic>("SELECT * FROM calculations", new { }, _config.GetConnectionString("default"));
        loadPrediction = calculation[0].prediction;
    }

    private MudTheme Theme = new MudTheme();

}
